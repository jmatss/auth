import { Page, TopMenu, TopMenuItem, TopMenuItems } from "top_menu.slint";
import { Code, CodesPage, MoveDirection } from "codes_page.slint";
import { EditCodePage } from "edit_code_page.slint";
import { AddCodePage } from "add_code_page.slint";

export component MainWindow inherits Window {
  // Contains all codes (and context) currently existing in the application.
  in property <[Code]> codes;
  // Will be updated with images from the phone camera (when the QR scanner is running).
  in property <image> camera;

  callback edit_code(code: Code, new_name: string, new_issuer: string);
  callback remove_code(code: Code);
  callback move_code(code: Code, direction: MoveDirection);
  callback start_qr_scanner() -> bool;
  callback stop_qr_scanner();
  pure callback unix_time() -> duration;

  property <Page> selected_page;
  property <Code> code_being_edited;

  forward-focus: focus;

  public function navigate_to_page(page: Page) {
    if (page == Page.AddCode && root.selected_page != Page.AddCode) {
      let prompted_for_permissions = !root.start_qr_scanner();
      if prompted_for_permissions { 
        // Do not navigate to "add-page" before the user has granted camera permissions.
        return;
      }
    } else if root.selected_page == Page.AddCode && page != Page.AddCode {
      root.stop_qr_scanner();
    }

    root.selected_page = page;
  }

  focus := FocusScope {
    key-pressed(event) => {
      if (event.text == Key.Back && root.selected_page != Page.Start) {
        root.navigate_to_page(Page.Start);
        return accept;
      } else {
        return reject;
      }
    }
  }

  VerticalLayout {
    if root.selected_page == Page.Start: VerticalLayout {
      TopMenu {
        TopMenuItems {
          TopMenuItem {
            icon: @image-url("images/plus.svg");
            clicked => root.navigate_to_page(Page.AddCode);
          }
          TopMenuItem {
            icon: @image-url("images/settings.svg");
            clicked => {}
          }
        }
      }
      
      codesPage := CodesPage {
        codes: codes;
        navigate_to_edit_code_page(code) => {
          code_being_edited = code;
          root.navigate_to_page(Page.EditCode);
        }
        unix_time() => root.unix_time();
      }
    }

    if root.selected_page == Page.AddCode: VerticalLayout {
      TopMenu {
        TopMenuItem {
          icon: @image-url("images/arrow_left.svg");
          TouchArea {
            clicked => root.navigate_to_page(Page.Start);
          }
        }
      }

      addCodePage := AddCodePage {
        camera: root.camera;
      }
    }

    if root.selected_page == Page.EditCode: VerticalLayout {
      TopMenu {
        TopMenuItem {
          icon: @image-url("images/arrow_left.svg");
          TouchArea {
            clicked => { root.selected_page = Page.Start; }
          }
        }

        TopMenuItems {
          TopMenuItem {
            icon: @image-url("images/chevron_up.svg");
            clicked => {
              root.move_code(editCodePage.code, MoveDirection.Up);
              root.navigate_to_page(Page.Start);
            }
          }
          TopMenuItem {
            icon: @image-url("images/chevron_down.svg");
            clicked => {
              root.move_code(editCodePage.code, MoveDirection.Down);
              root.navigate_to_page(Page.Start);
            }
          }
          TopMenuItem {
            icon: @image-url("images/minus.svg");
            clicked => editCodePage.remove_code_prompt();
          }
        }
      }

      editCodePage := EditCodePage {
        code: code_being_edited;
        edit_code(code, new_name, new_issuer) => root.edit_code(code, new_name, new_issuer);
        remove_code(code) => root.remove_code(code);
        navigate_to_start_page => root.navigate_to_page(Page.Start);
      }
    }
  }
}